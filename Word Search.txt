class Solution {
public:
    pair<int,int> findNeighbor(int i, int j, vector<vector<bool>> &isVisit,int n_i){
        switch(n_i){
            case 0 : {
                if(i-1 < 0) return make_pair(-1,-1);
                else if(isVisit[i-1][j] == 1) return make_pair(-1,-1);
                else return make_pair(i-1,j);
            }
            case 1 : {
                if(j+1 >= isVisit[0].size()) return make_pair(-1,-1);
                else if(isVisit[i][j+1] == 1) return make_pair(-1,-1);
                else return make_pair(i,j+1);
            }
            case 2 : {
                if(i+1 >= isVisit.size()) return make_pair(-1,-1);
                else if(isVisit[i+1][j] == 1) return make_pair(-1,-1);
                else return make_pair(i+1,j);
            }
            case 3 : {
                if(j-1 < 0) return make_pair(-1,-1);
                else if(isVisit[i][j-1] == 1) return make_pair(-1,-1);
                else return make_pair(i,j-1);
            }
        }
    }
    bool findTheTest(vector<vector<char>> &board, string word,
                     vector<vector<bool>> &isVisit, int i, int j,
                     int iw){
        if(iw == word.size()) return true;
        bool test = false;
        for(int n_i = 0; n_i < 4; n_i++){
            pair<int,int> co = findNeighbor(i,j,isVisit,n_i);
            if(co.first != -1){
                if(board[co.first][co.second] == word[iw]){
                    isVisit[co.first][co.second] = 1;
                    test = findTheTest(board,word,isVisit,co.first,co.second,iw+1);
                    isVisit[co.first][co.second] = 0;
                }
            }
            if(test) return test;
        }
        return test;
    }
    bool exist(vector<vector<char>> &board, string word){
        bool test = false;
        int M = board.size(), N = board[0].size();
        vector<vector<bool>> isVisit(board.size(),vector<bool>(board[0].size(),0));
        for(int i = 0; i < M; i++){
            for(int j = 0; j < N; j++){
                if(board[i][j] == word[0]){
                    if(word.size() == 1) return true;
                    isVisit[i][j] = 1;
                    test = findTheTest(board,word,isVisit,i,j,1);
                }
                if(test) return test;
                isVisit[i][j] = 0;
            }
        }
        return test;
    }
};